--- obs-studio-29.1.3/plugins/linux-v4l2/v4l2-input.c~	2023-06-19 00:05:22.000000000 +0200
+++ obs-studio-29.1.3/plugins/linux-v4l2/v4l2-input.c	2023-11-05 00:32:37.108931868 +0100
@@ -259,7 +259,11 @@
 			break;
 		}
 
+#if defined(__x86_64__) && defined(__ILP32__)
+		blog(LOG_DEBUG, "%s: ts: %06lld buf id #%d, flags 0x%08X, seq #%d, len %d, used %d", data->device_id,
+#else
 		blog(LOG_DEBUG, "%s: ts: %06ld buf id #%d, flags 0x%08X, seq #%d, len %d, used %d", data->device_id,
+#endif
 		     buf.timestamp.tv_usec, buf.index, buf.flags, buf.sequence, buf.length, buf.bytesused);
 
 		out.timestamp = timeval2ns(buf.timestamp);
--- obs-studio-31.0.0/plugins/obs-qsv11/common_utils_linux.cpp.orig	2024-12-07 00:21:55.000000000 +0100
+++ obs-studio-31.0.0/plugins/obs-qsv11/common_utils_linux.cpp	2024-12-27 00:01:45.876665615 +0100
@@ -509,7 +509,11 @@
 	obs_enter_graphics();
 	uint32_t gs_count = gs_get_adapter_count();
 	if (*adapter_count < gs_count) {
+#if defined(__x86_64__) && defined(__ILP32__)
+		blog(LOG_WARNING, "Too many video adapters: %d < %d", *adapter_count, gs_count);
+#else
 		blog(LOG_WARNING, "Too many video adapters: %ld < %d", *adapter_count, gs_count);
+#endif
 		obs_leave_graphics();
 		return;
 	}
--- obs-studio-31.0.0/shared/bpm/bpm.c.org	2024-12-27 00:27:44.626665761 +0100
+++ obs-studio-31.0.0/shared/bpm/bpm.c	2024-12-27 00:13:58.196665720 +0100
@@ -9,7 +9,11 @@
 	 */
 	memset(&m_time->rfc3339_str, 0, sizeof(m_time->rfc3339_str));
 	strftime(m_time->rfc3339_str, sizeof(m_time->rfc3339_str), "%Y-%m-%dT%T", gmtime(&m_time->tspec.tv_sec));
+#if defined(__x86_64__) && defined(__ILP32__)
+	sprintf(m_time->rfc3339_str + strlen(m_time->rfc3339_str), ".%03lldZ", m_time->tspec.tv_nsec / 1000000);
+#else
 	sprintf(m_time->rfc3339_str + strlen(m_time->rfc3339_str), ".%03ldZ", m_time->tspec.tv_nsec / 1000000);
+#endif
 	m_time->valid = true;
 }
 
